---
title: "data-visualization"
format: html
editor: visual
---

```{r}
library(readr)
library(dplyr)
library(tidyr)
library(forcats) # makes working with factors easier
library(ggplot2)
library(leaflet) # interactive maps
library(DT) # interactive tables
library(scales) # scale functions for visualization
library(janitor) # expedite cleaning and exploring data
library(viridis) # colorblind friendly color pallet
```
```{r}
delta_visits <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=edi.587.1&entityid=cda8c1384af0089b506d51ad8507641f") %>% 
    janitor::clean_names() ## Introducing this new package!
```

## Exploring

```{r}
glimpse(delta_visits) #gives a sneaky peal of the data

range(delta_visits$date) #see the range for that column

unique(delta_visits$time_of_day) #prints out the unique values in this column
```


## Getting data ready

```{r}
visits_long<- delta_visits %>% 
  pivot_longer(cols = c("sm_boat", "med_boat", "lrg_boat", "bank_angler", "scientist", "cars"),
               names_to = "visitor_type",
               values_to = "quantity") %>% 
  rename(restore_loc = eco_restore_approximate_location) %>% 
  select(-notes)


#this turns your data frame from wide format to long

```

## Plotting with 'ggplot2'

```{r}

ggplot(visits_long,
       aes(x = restore_loc, y = quantity)) +
  geom_col()

```

## Calculating daily visits by visit type

```{r}

daily_visit<- visits_long %>% 
  group_by(restore_loc, date, visitor_type) %>% 
  summarise(daily_visits = sum(quantity))


```

## Customizing our plot

```{r}

ggplot(daily_visit,
       aes(x = restore_loc, y = daily_visits)) +
  geom_col(fill = "blue")

```

## More customizations

```{r}

ggplot(daily_visit,
       aes(x = restore_loc, y = daily_visits, 
           fill = visitor_type)) +
  geom_col() +
  labs(x = "Restoration Location",
       y = "Number of Visits", 
       fill = "Type of Visitors",
       title = "Total Number of Visits to Delta Restoration Sites by visitor type",
       subtitle = "Sum of all visits during study period") + 
  coord_flip() +
  theme_bw()

```

## Using 'theme()' function to further customize our plot


```{r}

ggplot(daily_visit,
       aes(x = restore_loc, y = daily_visits, 
           fill = visitor_type)) +
  geom_col() +
  labs(x = "Restoration Location",
       y = "Number of Visits", 
       fill = "Type of Visitors",
       title = "Total Number of Visits to Delta Restoration Sites by visitor type",
       subtitle = "Sum of all visits during study period") + 
  coord_flip() +
  theme_bw() +
  theme(legend.position = "bottom", 
        axis.ticks.y = element_blank())

```


## Saving theme into an object

```{r}

my_theme<- theme_bw(base_size = 16) +
  theme(legend.position = "bottom", 
                 axis.ticks.y = element_blank())


```

##remaking the plot but using "my_theme" created above

```{r}

ggplot(daily_visit,
       aes(x = restore_loc, y = daily_visits, 
           fill = visitor_type)) +
  geom_col() +
  labs(x = "Restoration Location",
       y = "Number of Visits", 
       fill = "Type of Visitors",
       title = "Total Number of Visits to Delta Restoration Sites by visitor type",
       subtitle = "Sum of all visits during study period") + 
  coord_flip() +
  my_theme

```

```{r}

ggplot(daily_visit,
       aes(x = restore_loc, y = daily_visits, 
           fill = visitor_type)) +
  geom_col() +
  labs(x = "Restoration Location",
       y = "Number of Visits", 
       fill = "Type of Visitors",
       title = "Total Number of Visits to Delta Restoration Sites by visitor type",
       subtitle = "Sum of all visits during study period") + 
  coord_flip() +
  my_theme +
  scale_y_continuous(breaks = seq(0,120, 20))

```


## adding sorting variable

```{r}
daily_visits_total<- daily_visit %>% 
  group_by(restore_loc) %>% 
  mutate(n = sum(daily_visits)) %>% 
  ungroup()

```

```{r}

ggplot(daily_visits_total,
       aes(x = fct_reorder(restore_loc,n), y = daily_visits, 
           fill = visitor_type)) +
  geom_col() +
  labs(x = "Restoration Location",
       y = "Number of Visits", 
       fill = "Type of Visitors",
       title = "Total Number of Visits to Delta Restoration Sites by visitor type",
       subtitle = "Sum of all visits during study period") + 
  coord_flip() +
  my_theme +
  scale_y_continuous(breaks = seq(0,120, 20))

```

##changing the color


```{r}

ggplot(daily_visits_total,
       aes(x = fct_reorder(restore_loc,n), y = daily_visits, 
           fill = visitor_type)) +
  geom_col() +
  labs(x = "Restoration Location",
       y = "Number of Visits", 
       fill = "Type of Visitors",
       title = "Total Number of Visits to Delta Restoration Sites by visitor type",
       subtitle = "Sum of all visits during study period") + 
  coord_flip() +
  my_theme +
  scale_y_continuous(breaks = seq(0,120, 20)) +
  scale_fill_viridis_d()

```


## Saving plot 

```{r}
ggsave("figures/visits_restore_site_delta.jpg", width = 12, height = 6, units = "in")
```


## Creating multiple plots with 'facet_wrap()'

```{r}
facet_plot <- ggplot(data = daily_visits_total,
       aes(x = visitor_type, y = daily_visits,
           fill = visitor_type))+
    geom_col()+
    theme_bw()+
    facet_wrap(~restore_loc,
               scales = "free_y",
               ncol = 5,
               nrow = 2)+
    scale_fill_viridis_d()+
    labs(x = "Type of visitor",
         y = "Number of Visits",
         title = "Total Number of Visits to Delta Restoration Areas",
         subtitle = "Sum of all visits during study period")+
    theme_bw()+
    theme(legend.position = "bottom",
          axis.ticks.x = element_blank(),
          axis.text.x = element_blank()) 

facet_plot
```


## Interactive tables with 'DT'


```{r}

locations <- visits_long %>% 
  distinct(restore_loc, .keep_all = TRUE) %>% 
  select(restore_loc, latitude, longitude)

```

```{r}
datatable(locations)
```


## Interactive maps with 'leaflet'

```{r}

leaflet(locations) %>%
    addTiles() %>%
    addMarkers(
        lng = ~ longitude,
        lat = ~ latitude,
        popup = ~ restore_loc
    )

```


```{r}
leaflet(locations) %>%
    addWMSTiles(
        "https://basemap.nationalmap.gov/arcgis/services/USGSTopo/MapServer/WmsServer",
        layers = "0",
        options = WMSTileOptions(format = "image/png", transparent = TRUE)) %>%
    addCircleMarkers(
        lng = ~ longitude,
        lat = ~ latitude,
        popup = ~ restore_loc,
        radius = 5,
        # set fill properties
        fillColor = "salmon",
        fillOpacity = 1,
        # set stroke properties
        stroke = T,
        weight = 0.5,
        color = "white",
        opacity = 1)
```


```{r}
leaflet(locations) %>%
    addWMSTiles(
        "https://basemap.nationalmap.gov/arcgis/services/USGSImageryTopo/MapServer/WmsServer",
        layers = "0",
        options = WMSTileOptions(format = "image/png", transparent = TRUE)) %>%
    addWMSTiles(
        "https://basemap.nationalmap.gov/arcgis/services/USGSHydroCached/MapServer/WmsServer",
        layers = "0",
        options = WMSTileOptions(format = "image/png", transparent = TRUE)) %>%
    addCircleMarkers(
        lng = ~ longitude,
        lat = ~ latitude,
        popup = ~ restore_loc,
        radius = 5,
        # set fill properties
        fillColor = "salmon",
        fillOpacity = 1,
        # set stroke properties
        stroke = T,
        weight = 0.5,
        color = "white",
        opacity = 1)
```











